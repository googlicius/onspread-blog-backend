Description: 'This template deploys a codepipeline with 2 stages: source and deployment stage.'

Parameters:
  SourceObjectKey:
    Description: 'S3 source artifact'
    Type: String
    Default: artifacts.zip
    MinLength: 3
    AllowedPattern: ".+"
  EnvironmentName:
    Description: 'An environment name that is prefixed to resource names'
    Type: String
    MinLength: 3
    MaxLength: 255
    AllowedPattern: '^[A-Za-z0-9_-]+$'
  Ec2TagKey:
    Description: Tag key of EC2 instances to deploy.
    Type: String
    Default: Name
    MinLength: 3
  Ec2TagValue:
    Description: Tag value of EC2 instances to deploy.
    Type: String
    MinLength: 3

Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled

  CodePipelineArtifactStoreBucket:
    Type: AWS::S3::Bucket

  CodePipelineArtifactStoreBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CodePipelineArtifactStoreBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: DenyUnEncryptedObjectUploads
            Effect: Deny
            Principal: '*'
            Action: s3:PutObject
            Resource:
              !Join ['', [!GetAtt CodePipelineArtifactStoreBucket.Arn, '/*']]
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: aws:kms
          - Sid: DenyInsecureConnections
            Effect: Deny
            Principal: '*'
            Action: s3:*
            Resource:
              !Join ['', [!GetAtt CodePipelineArtifactStoreBucket.Arn, '/*']]
            Condition:
              Bool:
                aws:SecureTransport: false

  CodeDeloyServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: !Sub ${EnvironmentName}_AWS-CodePipeline-Service
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: '*'
              - Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: '*'
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: '*'
              - Effect: Allow
                Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: '*'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource: '*'
              - Effect: Allow
                Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: '*'

  CodedeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub ${EnvironmentName}_BackendCodedeployApplication
      ComputePlatform: Server

  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodedeployApplication
      DeploymentGroupName: !Sub ${EnvironmentName}_BackendCodedeployApplication_Group
      ServiceRoleArn: !GetAtt CodeDeloyServiceRole.Arn
      DeploymentStyle:
        DeploymentType: IN_PLACE
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
      AutoRollbackConfiguration:
        Enabled: true
        Events:
          - DEPLOYMENT_FAILURE
      Ec2TagFilters:
        - Key: !Ref Ec2TagKey
          Value: !Ref Ec2TagValue
          Type: KEY_AND_VALUE

  BackendPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${EnvironmentName}_BackendPipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Location: !Ref CodePipelineArtifactStoreBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: S3
                Version: '1'
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                S3Bucket: !Ref SourceBucket
                S3ObjectKey: !Ref SourceObjectKey
                PollForSourceChanges: true
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployAction
              InputArtifacts:
                - Name: SourceOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodedeployApplication
                DeploymentGroupName: !Ref DeploymentGroup
              RunOrder: 1

  # AmazonCloudWatchEventRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service:
  #               - events.amazonaws.com
  #           Action: sts:AssumeRole
  #     Path: /service-role/
  #     Policies:
  #       - PolicyName: cwe-pipeline-execution
  #         PolicyDocument:
  #           Version: 2012-10-17
  #           Statement:
  #             - Effect: Allow
  #               Action: codepipeline:StartPipelineExecution
  #               Resource:
  #                 !Join [
  #                   '',
  #                   [
  #                     'arn:aws:codepipeline:',
  #                     !Ref 'AWS::Region',
  #                     ':',
  #                     !Ref 'AWS::AccountId',
  #                     ':',
  #                     !Ref BackendPipeline,
  #                   ],
  #                 ]

  # AmazonCloudWatchEventRule:
  #   Type: AWS::Events::Rule
  #   Properties:
  #     EventPattern:
  #       source:
  #         - aws.s3
  #       detail-type:
  #         - 'AWS API Call via CloudTrail'
  #       detail:
  #         eventSource:
  #           - s3.amazonaws.com
  #         eventName:
  #           - PutObject
  #           - CompleteMultipartUpload
  #           - CopyObject
  #         requestParameters:
  #           bucketName:
  #             - !Ref SourceBucket
  #           key:
  #             - !Ref SourceObjectKey
  #     Targets:
  #       - Arn:
  #           !Join [
  #             '',
  #             [
  #               'arn:aws:codepipeline:',
  #               !Ref 'AWS::Region',
  #               ':',
  #               !Ref 'AWS::AccountId',
  #               ':',
  #               !Ref BackendPipeline,
  #             ],
  #           ]
  #         RoleArn: !GetAtt AmazonCloudWatchEventRole.Arn
  #         Id: codepipeline-BackendPipeline

  # Trail:
  #   Type: AWS::CloudTrail::Trail
  #   Properties:
  #     IsLogging: true
  #     S3BucketName: !Ref SourceBucket
  #     S3KeyPrefix: !Ref SourceObjectKey

Outputs:
  SourceBucketARN:
    Description: 'S3 bucket ARN that Cloudtrail will use'
    Value: !GetAtt SourceBucket.Arn
    Export:
      Name: SourceBucketARN
