Description:
  This template deploys a VPC, with one public and private subnets spread
  across two Availability Zones. It deploys an internet gateway, with a default
  route on the public subnets. It deploys a pair of NAT gateways (one in each AZ),
  and default routes for them in the private subnets.

  And it also deploys an EC2 instance attached with one EIP, 2 security groups
  placed in public subnet of vpc created above.

Parameters:
  EnvironmentName:
    Description: 'An environment name that is prefixed to resource names'
    Type: String
    MinLength: 1
    MaxLength: 255
    AllowedPattern: '^[A-Za-z0-9_-]+$'
    Default: OnspreadBlogStack_dev
  
  WebServerSSHKeyName:
    Description: A ssh key name using for ssh access.
    Type: String
    Default: MySingaoreKey

  VpcCIDR:
    Description: 'Please enter the IP range (CIDR notation) for this VPC'
    Type: String
    Default: 10.192.0.0/16

  PublicSubnetCIDR:
    Description: 'Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone'
    Type: String
    Default: 10.192.10.0/24

  PrivateSubnetCIDR:
    Description: 'Please enter the IP range (CIDR notation) for the private subnet in the first Availability Zone'
    Type: String
    Default: 10.192.20.0/24

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Subnet (AZ1)

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Select [0, !GetAZs '']
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Subnet (AZ1)

  # NatGatewayEIP:
  #   Type: AWS::EC2::EIP
  #   DependsOn: InternetGatewayAttachment
  #   Properties:
  #     Domain: vpc

  # NatGateway:
  #   Type: AWS::EC2::NatGateway
  #   Properties:
  #     AllocationId: !GetAtt NatGatewayEIP.AllocationId
  #     SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} Private Routes (AZ1)

  # Uncomment if you want to define a private route.
  # DefaultPrivateRoute:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable
  #     DestinationCidrBlock: 0.0.0.0/0
  #     VpcEndpointId: !Ref VPC
  #     # NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Web SecurityGroup
  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName} allow web
      GroupDescription: Allow web connections from this source security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} ServerSecurityGroup

  # SSH SecurityGroup
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${EnvironmentName} allow ssh
      GroupDescription: Allow ssh connections from this source security group
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 22
          IpProtocol: tcp
          ToPort: 22
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName} SSHSecurityGroup

  # IAM role for ec2 instance
  S3ReadOnlyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: '/'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'S3ReadOnlyPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:Get*'
                  - 's3:List*'
                Resource: '*'

  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles:
        - !Ref S3ReadOnlyRole

  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-00b8d9cb8a7161e41
      InstanceType: t2.small
      SecurityGroupIds:
        - !Ref ServerSecurityGroup
        - !Ref SSHSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: |
          #!/usr/bin/env bash
          yum update -y
          yum install ruby -y
          yum install wget -y

          # Instal codedeploy agent
          cd /home/ec2-user
          wget https://aws-codedeploy-ap-southeast-1.s3.ap-southeast-1.amazonaws.com/latest/install
          chmod +x ./install
          ./install auto

          service codedeploy-agent status

          # Install nvm
          curl https://raw.githubusercontent.com/creationix/nvm/v0.25.0/install.sh | bash
          mv /.nvm /home/ec2-user/.nvm
          chown ec2-user:ec2-user /home/ec2-user/.nvm
          cat > /home/ec2-user/.bashrc <<EOF
          export NVM_DIR="/home/ec2-user/.nvm"
          [ -s "/home/ec2-user/.nvm/nvm.sh" ] && \. "/home/ec2-user/.nvm/nvm.sh"
          EOF
          source /home/ec2-user/.bashrc
          nvm install v12.18.4
          nvm alias default v12.18.4

          # Install pm2, yarn
          npm i -g yarn
          npm i -g pm2

          # Install and enable EBEL
          cd /tmp
          wget -O epel.rpm â€“nv \
          https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
          yum install -y ./epel.rpm

          # Install Certbot for nginx
          yum install -y python2-certbot-nginx.noarch

          # Install nginx
          amazon-linux-extras install nginx1 -y
          service nginx start
      KeyName: !Ref WebServerSSHKeyName
      IamInstanceProfile: !Ref IamInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}_WebServerInstance

  WebServerEIP:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref WebServerInstance

Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC

  PublicSubnets:
    Description: A list of the public subnets
    Value: !Join [',', [!Ref PublicSubnet]]

  PrivateSubnets:
    Description: A list of the private subnets
    Value: !Join [',', [!Ref PrivateSubnet]]

  PublicSubnet:
    Description: A reference to the public subnet in the 1st Availability Zone
    Value: !Ref PublicSubnet

  PrivateSubnet:
    Description: A reference to the private subnet in the 1st Availability Zone
    Value: !Ref PrivateSubnet

  ServerSecurityGroup:
    Description: Security group with web ingress rule
    Value: !Ref ServerSecurityGroup

  SSHSecurityGroup:
    Description: Security group with ssh ingress rule
    Value: !Ref SSHSecurityGroup

  IamInstanceProfile:
    Description: An Iam instance profile allows access s3 from ec2 instance
    Value: !Ref IamInstanceProfile

  WebServerInstance:
    Description: A web server instance
    Value: !Ref WebServerInstance
